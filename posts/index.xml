<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on MrLeiDeSen&#39;s Blog</title>
    <link>https://mrleidesen.github.io/posts/</link>
    <description>Recent content in Posts on MrLeiDeSen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 11 Mar 2021 13:53:48 +0800</lastBuildDate><atom:link href="https://mrleidesen.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第二次尝试Flutter</title>
      <link>https://mrleidesen.github.io/posts/flutter_try_second/</link>
      <pubDate>Thu, 11 Mar 2021 13:53:48 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/flutter_try_second/</guid>
      <description>前言 学了几天flutter，感觉写起来还是很香的，比原生开发速度快很多，不过以前没接触过安卓开发，思维还在Web开发上，记录一下
布局 一般是使用Column和Row以及Container来布局比较多，还有Expanded，类似与flex: 1这个效果，能把剩余的空间补充满。
在使用的时候还遇到了按钮宽度需要100%的情况，2.0废弃了1.0一些组件，按钮一般使用ElevatedButton，但是没法设置宽高。网上查了一下用SizedBox来当它的父容器，这样它就会跟着父容器的宽高走了，需要宽度100%的话就是double.infinity
如何设置width:100% 目前发现有double.infinity和MediaQuery.of(context).size.width。后续发现的话继续补充
路由 路由的话一般定义在MaterialApp里面，如下：
return MaterialApp( title: &amp;#39;title&amp;#39;, initialRoute: &amp;#34;/home&amp;#34;, // 默认的路由  routes: { &amp;#34;/home&amp;#34;: (context) =&amp;gt; MyHome(), // 每个路由需要默认传参context  &amp;#34;/login&amp;#34;: (context) =&amp;gt; MyLogin() }, ); 导航的话常用以下几个
Navigator.pushNamed(context, &amp;#34;/login&amp;#34;); // 跳转到/login页面 Navigator.pop(context); // 返回上一级，可传第二个参数携带回上一级 Navigator.pushReplacementNamed(context, &amp;#34;/login&amp;#34;); //重定向至/login页面，就没法返回到上一级页面了 总结 如果是Web开发，可能思想上会有点不一样，多写写就能领悟到了。用Flutter进行快速开发的话还是很香的，毕竟只是为了出成品，速度足够快，也不用管性能优化。</description>
    </item>
    
    <item>
      <title>第一次尝试Flutter</title>
      <link>https://mrleidesen.github.io/posts/first_try_flutter/</link>
      <pubDate>Tue, 09 Mar 2021 15:11:40 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/first_try_flutter/</guid>
      <description>前言 听闻Flutter2.0很强，作为前端刚好对APP有点兴趣，整起来试试
环境 公司用的是Windows，先下载Flutter的SDK，迫于墙，所以在国内站下载，地址
跟着配置，我是用VSCode开发的，所以下面都是基于VSCode
创建项目和启动项目 创建项目还好，直接Flutter插件创建就好了，但是使用模拟器启动的时候就遇到问题了，会一直卡在
Running Gradle task &#39;assembleDebug&#39;... google了一下大家都说是墙的问题，然后改了一下阿里的源，直接起飞！下面和大家讲一下如何修改。
首先找到Flutter SDK的目录，然后找到packages\flutter_tools\gradle\flutter.gradle这个文件，修改以下内容：
buildscript { repositories { // 下面两行是注释的，maven开头的是新增的 // google() // jcenter() maven { url &#39;https://maven.aliyun.com/repository/google&#39; } maven { url &#39;https://maven.aliyun.com/repository/jcenter&#39; } maven { url &#39;http://maven.aliyun.com/nexus/content/groups/public&#39; } } dependencies { classpath &#39;com.android.tools.build:gradle:4.1.0&#39; } } 然后重新运行一下main.dart就能跑了（万恶的墙啊）总结 以上就是安装到运行的一些问题，等初步写个Demo出来熟悉了，再写一篇</description>
    </item>
    
    <item>
      <title>前端技术一些踩坑记录</title>
      <link>https://mrleidesen.github.io/posts/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E4%BA%9B%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 08 Mar 2021 15:30:51 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E4%BA%9B%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>顶部 编辑器相关（VSCode） 实用插件  Beautify 格式化代码 Bracket Pair Colorizer 括号颜色 Path Intellisense 路径智能提示 Vetur Vue提示插件 ES6 ES6语法提示 Open in Browser 在浏览器中打开  回到顶部
React开启JSX支持 打开settings，然后在右上角打开settings.json，配置如下：
&amp;#34;emmet.includeLanguages&amp;#34;: { &amp;#34;javascript&amp;#34;: &amp;#34;javascriptreact&amp;#34; } 回到顶部
NPM(Yarn)相关 &amp;ndash;save和&amp;ndash;save-dev的区别 npm install --save安装的包是运行时的依赖，比如axios
npm install --save-dev安装的包仅仅是在开发阶段的依赖，比如less\sass等
回到顶部
npm在国内加快下载速度  可以使用cnpm，安装方法npm install -g cnpm --registry=https://registry.npm.taobao.org(不推荐，有时候会出问题) 文档 安装yarn来代替，直接下载或者在npm中下载，推荐直接下载安装 (推荐)  # 切换淘宝源 npx nrm use taobao # 切换回来 npx nrm use npm 回到顶部
框架（Vue, React等）相关 Vue监听 Vue在mounted()中添加监听事件之后，记得在destroyed()中移除监听，特别是监听滚动事件
回到顶部
Vue引入iView之后使用Col标签后VSCode会报错 解决方法：在settings中搜索vetur.</description>
    </item>
    
  </channel>
</rss>
