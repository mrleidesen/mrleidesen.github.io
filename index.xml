<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MrLeiDeSen&#39;s Blog</title>
    <link>https://mrleidesen.github.io/</link>
    <description>Recent content on MrLeiDeSen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 09 Sep 2021 16:30:48 +0800</lastBuildDate><atom:link href="https://mrleidesen.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微信网页跳转小程序</title>
      <link>https://mrleidesen.github.io/posts/%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Thu, 09 Sep 2021 16:30:48 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/%E5%BE%AE%E4%BF%A1%E7%BD%91%E9%A1%B5%E8%B7%B3%E8%BD%AC%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
      <description>前言 这几天在写微信 H5 的项目，有一个功能是网页跳转小程序，遇到了非常坑的问题，因此记录一下
坑点 开始使用 要跳转小程序，就要用到微信 SDK 的开放标签 wx-open-launch-weapp
我们需要在 jssdk 中注册
wx.config({ // ... 其他配置按照需求配置  openTagList: [&amp;#34;wx-open-launch-weapp&amp;#34;] // 填入这个玩意儿 }) 正常使用下，我们就是这么用
&amp;lt;wx-open-launch-weapp id=&amp;#34;launch-btn&amp;#34; username=&amp;#34;gh_xxxxxxxx&amp;#34; path=&amp;#34;pages/home/index?user=123&amp;amp;action=abc&amp;#34; &amp;gt; &amp;lt;!-- script 标签不能省略 --&amp;gt; &amp;lt;script type=&amp;#34;text/wxtag-template&amp;#34;&amp;gt; &amp;lt;button&amp;gt;打开小程序&amp;lt;/button&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/wx-open-launch-weapp&amp;gt; 顺便吐槽，username 这个字段是小程序的原始ID，太蠢了&amp;hellip;
好，按照以上操作，最简单版本的跳转可以了，但是问题来了，如果你需要非常复杂的样式呢？
踩坑 根据官方文档说明
如果所使用的标签允许提供插槽，由于插槽中模版的样式是和页面隔离的，因此需要注意在插槽中定义模版的样式。 意思是，写在这个标签里的模板样式，是引用不到外界的，你要么写内联样式，要么在 script 里写 style 标签。
所以当你需要在现成的一个按钮外加这么一个标签，那么你的样式可能就会混乱，甚至标签不见。
比如
&amp;lt;style&amp;gt; .btn { color: red; } &amp;lt;/style&amp;gt; &amp;lt;wx-open-launch-weapp id=&amp;#34;launch-btn&amp;#34; username=&amp;#34;gh_xxxxxxxx&amp;#34; path=&amp;#34;pages/home/index?user=123&amp;amp;action=abc&amp;#34; &amp;gt; &amp;lt;!-- script 标签不能省略 --&amp;gt; &amp;lt;script type=&amp;#34;text/wxtag-template&amp;#34;&amp;gt; &amp;lt;style&amp;gt; .</description>
    </item>
    
    <item>
      <title>国内环境配置 Golang</title>
      <link>https://mrleidesen.github.io/posts/first_try_go/</link>
      <pubDate>Sat, 28 Aug 2021 20:11:40 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/first_try_go/</guid>
      <description>前言 最近在学习 Golang，但是由于网络问题安装老出错，所以稍微记录一下，比较简单。
版本 go 1.17
安装 首先就是安装，如果没有代理的话可以走 https://golang.google.cn/ 或者 https://gomirrors.org/ 这两个网站下载，有代理的话正常官网就行了。
我这里是 Windows 环境，Linux 和 mac 下估计会简单一点吧。
首先是选择安装路径，默认是在 C:\Program Files\Go ，不过我改成了 C:\go 的路径方便自己管理，当然也可以安装在其他盘符。
这里是重点
 安装完成后，进入系统环境变量，将 GOPATH 的路径改成 C:\go 之后选中 Path (记住是用户变量里的，不是系统变量)，点击“编辑” 看看有没有关于 Go 的环境变量，有的话就修改成 C:\go\bin 没有的话就加上 点击确定保存  查看版本号 接下来在终端里输入 go version 查看版本号
go version 返回正常的话说明安装没问题
之后输入 go env 查看环境变量是否已经改成你之前修改的了，如果没有修改成功，之后的一些操作可能会报错
go env 设置代理 因为国内网络环境问题，我们之后的一些包会安装失败，所以这个时候咱们把代理切到国内，可以选择 goproxy.io 或者 goproxy.cn
这里我选择的是 cn 的，根据教程设置一下环境变量就行，选哪个不重要，重要的是能用就行。
go env -w GO111MODULE=on go env -w GOPROXY=https://goproxy.cn,direct VSCode 配置 配置好以上，接下来我们来配置 VSCode ，如果你不使用 VSCode 可以跳过这一步。</description>
    </item>
    
    <item>
      <title>关于 Git 的一些操作</title>
      <link>https://mrleidesen.github.io/posts/git_work_flow/</link>
      <pubDate>Tue, 17 Aug 2021 13:15:48 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/git_work_flow/</guid>
      <description>前言 在上一家公司上班的时候，很少多人协同开发，所以 Git 上的操作仅限于 add, commit, push 等等简单的。
但是目前这家公司，多人协同就非常的频繁，所以稍微记录一下操作，免得自己以后忘记了。
一般公司都是用 GitLab 比较多，所以这里也按照 GitLab 来写。
Git WorkFlow Fork/Clone 首先我们在需要多人协作的项目中将项目 Fork 到我们自己的仓库（当然也可以直接 Clone，但是防止对源仓库误操作，最好还是 Fork）
添加 Remote 添加远端仓库的 Remote
git remote add &amp;lt;远程仓库名（自己取）&amp;gt; &amp;lt;远程仓库地址&amp;gt; # 举例 :git remote add dev https://remote.repo.address 本地 Pull git switch master # or git checkout master git pull &amp;lt;远程仓库名&amp;gt; &amp;lt;远程分支&amp;gt;:&amp;lt;本地分支&amp;gt; # 举例 :git pull dev master:master 建议本地的 master(main) 分支只做同步，代码修改在新建分支上，确保不破坏主分支
新建分支 如果你的公司比较严格，需要每个 Feature/Fix 都要新建一个分支，那就按照需求新建分支，如果没有特别要求，就按照自己名字新建分支也可以。
git checkout -b &amp;lt;分支名&amp;gt; # 举例 :git checkout -b fix-type 处理冲突 多人开发中，肯定是每个人开发自己的部分先后提交。如果各自管各自的部分，不会改到别人的部分，基本上没什么冲突。但是一旦出现两人同时修改了一个文件的情况，就要开始处理冲突了。</description>
    </item>
    
    <item>
      <title>在项目中引入ESLint</title>
      <link>https://mrleidesen.github.io/posts/eslint_in_project/</link>
      <pubDate>Fri, 09 Jul 2021 13:33:02 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/eslint_in_project/</guid>
      <description>前言 在项目开发过程中，随着团队成员的增加以及项目体量的增大，我们需要更加规范我们的代码，除了一些概念性的规范(如 Airbnb 规范)，我们还需要通过引入 ESLint 来自动化规范我们的代码。
引入 首先确保我们的项目中使用 Webpack，先引入ESLint Webpack Plugin
yarn add eslint-webpack-plugin -D # or npm install eslint-webpack-plugin --save-dev 之后在 Webpack 配置中引入
const ESLintPlugin = require(&amp;#39;eslint-webpack-plugin&amp;#39;) // ... module.exports = { // ...  plugins: [ // ...  new ESLintPlugin() // ...  ] // ... } 如果使用的编辑器是 VSCode，记得安装插件 ESLint
生成规范 ESLint 会通过本地文件 .eslintrc.js 来判断规则，我们可以自己编写规则，也可以直接引入现成的规则，比如: Airbnb, Standard 等。
通过命令生成文件
npx eslint --init # 如果 eslint 全局安装了，可以如下 eslint --init 根据提示来进行选择就可以了，选择好之后再运行项目，就会发现项目会报一些 error/warning 了，这些都是正常的，我们可以通过命令行 --fix 来修复一些简单的规范问题</description>
    </item>
    
    <item>
      <title>React Context用法</title>
      <link>https://mrleidesen.github.io/posts/react_context/</link>
      <pubDate>Tue, 15 Jun 2021 08:59:30 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/react_context/</guid>
      <description>创建一个context 首先需要通过React.createContext定义一个context，一下的定义需要在函数外定义
// ./src/Store.js const StoreContext = React.createContext() 如果你使用TS，那么createContext中需要传入一个默认值
// ./src/Store.tsx interface StoreProps { count: number setCount: Function } const StoreContext = React.createContext&amp;lt;StoreProps&amp;gt;({} as StoreProps) // 如果不加 &amp;#39;as StoreProps&amp;#39;,因为里面的参数都是必填，会报错 // 或者传入{ count: 0, setCount: () =&amp;gt; {} }这样当做默认值 // 也可以把类型定义为 &amp;#39;StoreProps | null&amp;#39;，然后传入null，但不是很推荐 创建一个Provider export default function Store({ children }) { const [count, setCount] = useState(0) return ( &amp;lt;StoreContext.Provider value={{ count, setCount }} &amp;gt; {children} &amp;lt;/StoreContext.Provider&amp;gt; ) } 使用useContext // .</description>
    </item>
    
    <item>
      <title>Vue3踩坑经历</title>
      <link>https://mrleidesen.github.io/posts/vue3_issues/</link>
      <pubDate>Tue, 01 Jun 2021 10:01:22 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/vue3_issues/</guid>
      <description>ref 在setup()中，如果你声明了一个ref变量
setup() { const activeId = ref(0) } 除了重新赋值需要加上.value，其他取值的情况下也要加上.value
const activeId = ref(1) const list = [{ name: &amp;#39;jack&amp;#39; }] // 正常赋值 activeId.value = 0 // 以下错误的取值方式 // console.log(list[activeId])  // 正确方式 console.log(list[activeId.value]) // { name: &amp;#39;jack&amp;#39; } 如果你在reactive中也赋值了ref，那么在取值的时候，也要使用.value
reactive 正常使用，我们一般用对象
const book = reactive({ author: &amp;#39;jack&amp;#39; }) 但有时候我们要用数组
const books = reactive([{ author: &amp;#39;jack&amp;#39; }]) 响应式不能直接赋值，如果是对象，我们得修改字段，或者使用Object.assign
// 方法一 book.author = &amp;#34;jojo&amp;#34; //方法二 Object.assign(book, {author: &amp;#39;jojo&amp;#39;}) 修改数组的话，同样得修改原始数据的，比如splice, push等方法
// 方法一 books[0] = {author: &amp;#34;jojo&amp;#34;} // 方法二 books.</description>
    </item>
    
    <item>
      <title>Vue2对比Vue3组合式API写法</title>
      <link>https://mrleidesen.github.io/posts/vue2_to_vue3/</link>
      <pubDate>Sun, 25 Apr 2021 09:13:56 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/vue2_to_vue3/</guid>
      <description>前言 Vue3已经基本上成熟了，很多开源项目也开始往Vue3上迁移了，新增的组合式API确实非常好用，这里稍微写一下Vue2原本模式和Vue3组合式API的写法有哪些不同
对比 Data和Methods  Vue2  export default { data: () =&amp;gt; ({ count: 0, user: { name: &amp;#39;Jack&amp;#39;, age: 23 } }), methods: { onClick() { this.count++ } } }  Vue3  import { ref, reactive } from &amp;#39;vue&amp;#39; export default { setup() { const count = ref(0) // 定义普通的类型  const user = reactive({ name: &amp;#39;Jack&amp;#39;, age: 23 }) // 定义对象  const onClick = () =&amp;gt; { count.</description>
    </item>
    
    <item>
      <title>uni-app安卓调用前置摄像头并自动拍照</title>
      <link>https://mrleidesen.github.io/posts/uni_app_using_camera/</link>
      <pubDate>Mon, 19 Apr 2021 11:12:39 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/uni_app_using_camera/</guid>
      <description>uni-app安卓调用前置摄像头并自动拍照  最近有个uni-app打包成安卓APP的项目，需要拍照后去人脸验证，但是uni提供的只有调起相机，手动切换之后再点拍照，这样操作非常繁杂，就想着有没有啥方法
 问题 和小程序不同，原本小程序中使用腾讯的人脸识别，但是现在需要把项目移植到安卓上去，不仅没有人脸识别了，也没法直接调起前置摄像头。
查了一下H5+的方法，发现直接调起前置的方法在安卓不兼容，这么坑吗？
然后去插件市场找了一下发现都没有合适的，最后发现H5+的直播方法居然能用，还有nvue的直播推流也是能直接调起前置摄像头
nvue nvue的方式我在新开的项目中可以用，但是不知道为什么在原本的项目中会出现编译失败，不过这边也写一下。
 通过live-pusher组件搭配LivePusherContext的API来搭配 不过注意nvue的各种限制 新建文件scan.nvue  &amp;lt;template&amp;gt; &amp;lt;view class=&amp;#34;content&amp;#34;&amp;gt; &amp;lt;live-pusher id=&amp;#39;livePusher&amp;#39; ref=&amp;#34;livePusher&amp;#34; class=&amp;#34;livePusher&amp;#34; url=&amp;#34;&amp;#34; mode=&amp;#34;SD&amp;#34; :muted=&amp;#34;true&amp;#34; :enable-camera=&amp;#34;true&amp;#34; :auto-focus=&amp;#34;true&amp;#34; :beauty=&amp;#34;1&amp;#34; whiteness=&amp;#34;2&amp;#34; aspect=&amp;#34;9:16&amp;#34; &amp;gt;&amp;lt;/live-pusher&amp;gt; &amp;lt;/view&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;script&amp;gt; export default { onReady() { // 注意：需要在onReady中 或 onLoad 延时  // 因为不需要推流，只需要用到预览画面和快照功能  this.context = uni.createLivePusherContext(&amp;#34;livePusher&amp;#34;, this); this.startPreview(); }, methods: { // 快照接口，需要倒计时的话可以根据需要调用这个接口  snapshot: function() { this.context.snapshot({ success: (e) =&amp;gt; { console.log(e); } }); }, startPreview: function() { this.</description>
    </item>
    
    <item>
      <title>安卓WebView同Javascript通信</title>
      <link>https://mrleidesen.github.io/posts/webview_to_js/</link>
      <pubDate>Fri, 26 Mar 2021 08:41:01 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/webview_to_js/</guid>
      <description>前言 最近项目里有需要用到安卓WebView和JS通信，毕竟不是安卓开发，就去了解了一下。
环境 用的Kotlin的原生和Vue3
创建项目 首先开一个原生安卓的Empty模板，在activity_main.xml中嵌入一个WebView
&amp;lt;WebView android:id=&amp;#34;@+id/webview&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;match_parent&amp;#34; /&amp;gt; 在AndroidManifest.xml文件中写入网络权限配置，如果需要相机之类的权限，加入后再动态申请，这里只演示通信
&amp;lt;manifest&amp;gt; // ... &amp;lt;uses-permission android:name=&amp;#34;android.permission.INTERNET&amp;#34; /&amp;gt; // ... &amp;lt;/manifest&amp;gt; 配置Kotlin文件 在项目下的MainActivity.kt中写入
override fun onCreate(savedInstanceState: Bundle?) { super.onCreate(savedInstanceState) setContentView(R.layout.activity_main) val webView = setWebViewSettings() } @SuppressLint(&amp;#34;SetJavascriptEnabled&amp;#34;) private fun setWebViewSettings(): WebView { // 找到webview的控件  val myWebView: WebView = findViewById(R.id.webview) // 启用js  myWebView.settings.javaScriptEnabled = true // 与js交互，js中就用client开始调用  myWebView.addJavascriptInterface(UserInfoInterface(this), &amp;#34;client&amp;#34;) // 防止webview跳转到APP外的浏览器  myWebView.webViewClient = object : WebViewClient() { override fun shouldOverrideUrlLoading(view: WebView?</description>
    </item>
    
    <item>
      <title>在Flutter2.0中使用高德地图</title>
      <link>https://mrleidesen.github.io/posts/amap_in_flutter/</link>
      <pubDate>Wed, 17 Mar 2021 16:19:46 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/amap_in_flutter/</guid>
      <description>前言 在学习过程中需要用到地图组件，但是迫于国内环境，无法使用封装好的Google地图，只能使用国内目前有的百度和高德。因为老项目用的是高德，所以这边踩高德的坑。
文档地址 官方文档
开始使用 申请Key 首先是申请高德的Key，这一步比较简单，跟着官方文档走一般没有问题。
配置SDK 因为flutter插件默认不带地图SDK，我们需要通过原生的方式来引入SDK，官方也是通过Android的文档来告诉我们怎么做的，可能有些小伙伴第一次接触有点看不懂，我这里也写一下方便自己记忆。
 根据文档我们跳转到这个页面。有拷贝添加和Gradle继承两种方法，这边我们为了方便使用Gradle 正常情况下仓库地址已经配置好了，所以配置仓库可以跳过 之后在项目下的android/app/build.gradle文件中找到dependencies添加以下几行  dependencies { //... compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;]) //3D地图so及jar compile &#39;com.amap.api:3dmap:latest.integration&#39; //定位功能 compile &#39;com.amap.api:location:latest.integration&#39; //... }  到这配置SDK这一步就完成了 不过还是有可能会出现网络异常的情况，没找到其他解决方案，只能多试试或者代理  集成Flutter插件  在flutter项目中引入amap_flutter_map: ^1.0.0(版本号可不填，默认最新) 编写widget  import &amp;#39;package:amap_flutter_map/amap_flutter_map.dart&amp;#39;; import &amp;#39;package:amap_flutter_base/amap_flutter_base.dart&amp;#39;; class MyMap extends StatefulWidget { @override _MyMapState createState() =&amp;gt; _MyMapState(); } class _MyMapState extends State&amp;lt;MyMap&amp;gt; { static const AMapApiKey amapApiKeys = AMapApiKey(androidKey: &amp;#39;填入你申请的key&amp;#39;); AMapController _mapController; void onMapCreated(AMapController controller) { setState(() { _mapController = controller; getApprovalNumber(); }); } /// 获取审图号  void getApprovalNumber() async { //普通地图审图号  String mapContentApprovalNumber = await _mapController?</description>
    </item>
    
    <item>
      <title>第二次尝试Flutter</title>
      <link>https://mrleidesen.github.io/posts/flutter_try_second/</link>
      <pubDate>Thu, 11 Mar 2021 13:53:48 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/flutter_try_second/</guid>
      <description>前言 学了几天flutter，感觉写起来还是很香的，比原生开发速度快很多，不过以前没接触过安卓开发，思维还在Web开发上，记录一下
布局 一般是使用Column和Row以及Container来布局比较多，还有Expanded，类似与flex: 1这个效果，能把剩余的空间补充满。
在使用的时候还遇到了按钮宽度需要100%的情况，2.0废弃了1.0一些组件，按钮一般使用ElevatedButton，但是没法设置宽高。网上查了一下用SizedBox来当它的父容器，这样它就会跟着父容器的宽高走了，需要宽度100%的话就是double.infinity
如何设置width:100% 目前发现有double.infinity和MediaQuery.of(context).size.width。后续发现的话继续补充
路由 路由的话一般定义在MaterialApp里面，如下：
return MaterialApp( title: &amp;#39;title&amp;#39;, initialRoute: &amp;#34;/home&amp;#34;, // 默认的路由  routes: { &amp;#34;/home&amp;#34;: (context) =&amp;gt; MyHome(), // 每个路由需要默认传参context  &amp;#34;/login&amp;#34;: (context) =&amp;gt; MyLogin() }, ); 导航的话常用以下几个
Navigator.pushNamed(context, &amp;#34;/login&amp;#34;); // 跳转到/login页面 Navigator.pop(context); // 返回上一级，可传第二个参数携带回上一级 Navigator.pushReplacementNamed(context, &amp;#34;/login&amp;#34;); //重定向至/login页面，就没法返回到上一级页面了 父子组件传参  父组件调用子组件  // 定义一个全局key GlobalKey&amp;lt;_MyMapState&amp;gt; mapKey = GlobalKey(); // 子组件 class MyMap extends StatefulWidget { MyMap({Key key}) : super(key: key); @override _MyMapState createState() =&amp;gt; _MyMapState(); } class _MyMapState extends State&amp;lt;MyMap&amp;gt; { // .</description>
    </item>
    
    <item>
      <title>第一次尝试Flutter</title>
      <link>https://mrleidesen.github.io/posts/first_try_flutter/</link>
      <pubDate>Tue, 09 Mar 2021 15:11:40 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/first_try_flutter/</guid>
      <description>前言 听闻Flutter2.0很强，作为前端刚好对APP有点兴趣，整起来试试
环境 公司用的是Windows，先下载Flutter的SDK，迫于墙，所以在国内站下载，地址
跟着配置，我是用VSCode开发的，所以下面都是基于VSCode
创建项目和启动项目 创建项目还好，直接Flutter插件创建就好了，但是使用模拟器启动的时候就遇到问题了，会一直卡在
Running Gradle task &#39;assembleDebug&#39;... google了一下大家都说是墙的问题，然后改了一下阿里的源，直接起飞！下面和大家讲一下如何修改。
首先找到项目下android/build.gradle这个文件，修改以下内容：
buildscript { repositories { // 下面两行是注释的，maven开头的是新增的 // google() // jcenter() maven { url &#39;https://maven.aliyun.com/repository/google&#39; } maven { url &#39;https://maven.aliyun.com/repository/jcenter&#39; } maven { url &#39;http://maven.aliyun.com/nexus/content/groups/public&#39; } } } 然后重新运行一下main.dart就能跑了（万恶的墙啊）总结 以上就是安装到运行的一些问题，等初步写个Demo出来熟悉了，再写一篇</description>
    </item>
    
    <item>
      <title>前端技术一些踩坑记录</title>
      <link>https://mrleidesen.github.io/posts/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E4%BA%9B%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Mon, 08 Mar 2021 15:30:51 +0800</pubDate>
      
      <guid>https://mrleidesen.github.io/posts/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E4%B8%80%E4%BA%9B%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
      <description>顶部 编辑器相关（VSCode） 实用插件  Beautify 格式化代码 Bracket Pair Colorizer 括号颜色 Path Intellisense 路径智能提示 Vetur Vue提示插件 ES6 ES6语法提示 Open in Browser 在浏览器中打开  回到顶部
React开启JSX支持 打开settings，然后在右上角打开settings.json，配置如下：
&amp;#34;emmet.includeLanguages&amp;#34;: { &amp;#34;javascript&amp;#34;: &amp;#34;javascriptreact&amp;#34; } 回到顶部
NPM(Yarn)相关 &amp;ndash;save和&amp;ndash;save-dev的区别 npm install --save安装的包是运行时的依赖，比如axios
npm install --save-dev安装的包仅仅是在开发阶段的依赖，比如less\sass等
回到顶部
npm在国内加快下载速度  可以使用cnpm，安装方法npm install -g cnpm --registry=https://registry.npm.taobao.org(不推荐，有时候会出问题) 文档 安装yarn来代替，直接下载或者在npm中下载，推荐直接下载安装 (推荐)  # 切换淘宝源 npx nrm use taobao # 切换回来 npx nrm use npm 回到顶部
框架（Vue, React等）相关 Vue监听 Vue在mounted()中添加监听事件之后，记得在destroyed()中移除监听，特别是监听滚动事件
回到顶部
Vue引入iView之后使用Col标签后VSCode会报错 解决方法：在settings中搜索vetur.</description>
    </item>
    
  </channel>
</rss>
